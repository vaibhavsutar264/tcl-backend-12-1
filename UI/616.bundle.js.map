{"version":3,"file":"616.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/login/login-screen/Yup.tsx","webpack://tclcpasstwentyfirstoct/./src/components/login/login-screen/Login.tsx"],"sourcesContent":["import * as Yup from 'yup'\r\n\r\nconst schema = Yup.object({\r\n  email: Yup.string().email().required('Enter your email'),\r\n  password: Yup.string().min(5).required('Enter your password'),\r\n})\r\nexport default schema\r\n","import * as React from 'react'\r\nimport { SyntheticEvent, useState, useEffect } from 'react'\r\nimport { login } from '../../../redux/slices/authSlice'\r\nimport { AuthState, UserLogin } from '../../../types/authType'\r\nimport {\r\n    RootState,\r\n    useDispatch as useAppDispatch,\r\n    useSelector as useAppSelector,\r\n} from '../../../redux/store'\r\nimport { useFormik } from 'formik'\r\nimport schema from './Yup'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport { Typography } from '@mui/material'\r\n\r\n// Importing Material UI\r\nimport {\r\n    Box,\r\n    TextField,\r\n    InputLabel,\r\n    styled,\r\n    Button,\r\n    ButtonProps,\r\n    FormGroup,\r\n    FormControl,\r\n} from '@mui/material'\r\nimport { purple } from '@mui/material/colors'\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline'\r\nimport LockOpenIcon from '@mui/icons-material/LockOpen'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined'\r\n// Importing Images\r\nimport useLocales from '../../../hooks/useLocales'\r\nimport { getFromLocalStorage } from '../../../hooks/useLocalStorage'\r\nimport BackgroundBox from '../../common/elements/backGroundBox'\r\nimport BannerBg from '../../common/elements/banner'\r\nimport { useSelector } from 'react-redux'\r\nimport { base64Encode } from '../../../utils/Base64EncodeDecode'\r\nimport { apiVrbls, appRoutes } from '../../../utils/constants'\r\nimport Header from '../../header/Header'\r\nimport { useDarkMode } from '../../../themes/useDarkMode'\r\n\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n    color: theme.palette.getContrastText(purple[500]),\r\n    backgroundColor: purple[500],\r\n    height: '70px',\r\n    width: '100%',\r\n    borderRadius: '35px',\r\n    mixBlendMode: 'luminosity',\r\n    opacity: 0.5,\r\n    '&:hover': {\r\n        backgroundColor: purple[700],\r\n    },\r\n}))\r\n\r\ninterface State {\r\n    email: string\r\n    password: string\r\n    amount: string\r\n    weight: string\r\n    weightRange: string\r\n    showPassword: boolean\r\n}\r\n\r\nconst Login = ({toggleTheme}:any) => {\r\n    const { t } = useLocales()\r\n    const navigate = useNavigate()\r\n    const [open, setOpen] = useState(true)\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const dispatch = useAppDispatch()\r\n    const { user, isError, isSuccess, message, isAuthenticated } = useAppSelector(\r\n        (state: any) => state.auth || {}\r\n    )\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            console.log(message)\r\n        }\r\n    }, [isError, message, isAuthenticated])\r\n\r\n\r\n    useEffect(() => {\r\n        if (getFromLocalStorage('token') && getFromLocalStorage('token') !== null) {\r\n            if (user) {\r\n                if (user.attributes[apiVrbls.USER.IS_LOGGED_IN_FIRST]) {\r\n                // if (user) {\r\n                    navigate(appRoutes.SET_PASSWORD)\r\n                } else {\r\n                    navigate(appRoutes.DASHBOARD)\r\n                    // navigate(appRoutes.ROOT)\r\n                }\r\n            }\r\n        }\r\n    }, [user, navigate])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: () => {\r\n            const userDetails: UserLogin = {\r\n                email: email,\r\n                password: password,\r\n            }\r\n            dispatch(login(userDetails,email))\r\n        },\r\n    })\r\n    const { handleSubmit, handleChange, touched, errors } = formik\r\n\r\n    const handleEmailChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        setEmail((e.target as HTMLInputElement).value)\r\n        const emailVariable = /^[^ ]+@[^ ]+\\.[a-z]{2,4}$/\r\n        const emailBoxElement = document.getElementById(\r\n            'email-box'\r\n        ) as HTMLInputElement\r\n        if ((e.target as HTMLInputElement).value.match(emailVariable)) {\r\n            emailBoxElement.className = 'input-wrapper success'\r\n        } else {\r\n            emailBoxElement.className = 'input-wrapper'\r\n        }\r\n    }\r\n\r\n    const handlePasswordChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        setPassword((e.target as HTMLInputElement).value)\r\n        const patternVariable = '.{5,}'\r\n        const submitButtonElement = document.getElementById(\r\n            'btn-enable-style'\r\n        ) as HTMLButtonElement\r\n        const passwordBoxElement = document.getElementById(\r\n            'password-box'\r\n        ) as HTMLButtonElement\r\n        if ((e.target as HTMLInputElement).value.match(patternVariable)) {\r\n            submitButtonElement.className = 'customBtn-01 btn-enable-style'\r\n            passwordBoxElement.className = 'input-wrapper password-checkHide success'\r\n            setOpen(false)\r\n        } else {\r\n            (e.target as HTMLInputElement).className = 'form-control input-custom'\r\n            submitButtonElement.className = 'customBtn-01'\r\n            passwordBoxElement.className = 'input-wrapper password-checkHide'\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    const [values, setValues] = React.useState<State>({\r\n        email: '',\r\n        password: '',\r\n        amount: '',\r\n        weight: '',\r\n        weightRange: '',\r\n        showPassword: false,\r\n    })\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        })\r\n    }\r\n\r\n    const handleMouseDownPassword = (\r\n        event: React.MouseEvent<HTMLButtonElement>\r\n    ) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header toggleTheme={toggleTheme} />\r\n            <Box className=\"account__screen\">\r\n                {/* ACCOUNT SCREEN BANNER START*/}\r\n                <BannerBg />\r\n                {/* ACCOUNT SCREEN BANNER END */}\r\n                {/* ACCOUNT SCREEN ANIMATION START */}\r\n                <BackgroundBox />\r\n                {/* ACCOUNT SCREEN ANIMATION END */}\r\n                {/* ACCOUNT FORM START */}\r\n                <Box\r\n                    sx={{ flexGrow: 1 }}\r\n                    id=\"login-form\"\r\n                    className=\"account__form login-form\"\r\n                >\r\n                    <div className=\"form__inner\">\r\n                        <Box sx={{ width: 1 }} className=\"account__form__header\">\r\n                            <h3 className=\"title\">{t<string>('login')}</h3>\r\n                        </Box>\r\n                        <Box sx={{ width: 1 }} className=\"account__form__error\">\r\n                            <p className=\"error__msg\">\r\n                                {isError && message == 'Invalid email and password' ? (\r\n                                    <p>{t<string>('yourEmailIdPasswordNotMatch')}</p>\r\n                                ) : (\r\n                                    /* JSON.stringify(message) */\r\n                                    null\r\n                                )}\r\n                            </p>\r\n                        </Box>\r\n                        <Box sx={{ flexGrow: 1 }} className=\"account__form__body\">\r\n                            <form onSubmit={handleSubmit} action=\"#\" method=\"post\">\r\n                                <FormGroup>\r\n                                    <FormControl\r\n                                        className=\"input-wrapper yes-margin\"\r\n                                        data-margin={true}\r\n                                        id=\"email-box\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <InputLabel\r\n                                            htmlFor=\"username\"\r\n                                            id=\"label__icon\"\r\n                                            className=\"label__icon\"\r\n                                        >\r\n                                            <MailOutlineIcon id=\"mail-icon\" />\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                            className=\"input-field\"\r\n                                            required\r\n                                            id=\"username\"\r\n                                            label={t<string>('enterYourEmailID')}\r\n                                            variant=\"standard\"\r\n                                            sx={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\r\n                                            type=\"email\"\r\n                                            inputProps={{\r\n                                                'data-testid': 'email-element',\r\n                                                autoComplete: 'off',\r\n                                            }}\r\n                                            name=\"email\"\r\n                                            onChange={handleChange}\r\n                                            onInput={handleEmailChange}\r\n                                            value={email}\r\n                                        />\r\n                                    </FormControl>\r\n                                    {touched.email && errors.email && (\r\n                                        <p>\r\n                                            {errors.email == 'Enter your email' ? (\r\n                                                <p className=\"text-error\">{t<string>('email')}</p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            {errors.email == 'email must be a valid email' ? (\r\n                                                <p className=\"text-error\">\r\n                                                    {t<string>('mustBeValidEmail')}\r\n                                                </p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </p>\r\n                                    )}\r\n\r\n                                    <FormControl\r\n                                        className=\"input-wrapper password-checkHide no-margin\"\r\n                                        id=\"password-box\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <InputLabel htmlFor=\"password\" className=\"label__icon\">\r\n                                            <LockOpenIcon id=\"unlock-icon\" />\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                            required\r\n                                            id=\"password\"\r\n                                            label={t<string>('password')}\r\n                                            variant=\"standard\"\r\n                                            sx={{ width: 1, borderRadius: '10px !important' }}\r\n                                            type={values.showPassword ? 'text' : 'password'}\r\n                                            autoComplete=\"false\"\r\n                                            name=\"password\"\r\n                                            inputProps={{ 'data-testid': 'password-element' }}\r\n                                            className=\"form-control input-custom input-field\"\r\n                                            value={password}\r\n                                            onInput={handlePasswordChange}\r\n                                            onChange={handleChange}\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                            className=\"password-toggle\"\r\n                                                            aria-label=\"toggle password visibility\"\r\n                                                            onClick={handleClickShowPassword}\r\n                                                            onMouseDown={handleMouseDownPassword}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            {!values.showPassword ? (\r\n                                                                <VisibilityOffOutlinedIcon />\r\n                                                            ) : (\r\n                                                                <VisibilityOutlinedIcon />\r\n                                                            )}\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                    {touched.password && errors.password && (\r\n                                        <p>\r\n                                            {errors.password == 'Enter your password' ? (\r\n                                                <p className=\"text-error\">\r\n                                                    {t<string>('enterPassword')}\r\n                                                </p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            {errors.password ==\r\n                                                'password must be at least 5 characters' ? (\r\n                                                <p className=\"text-error\">\r\n                                                    {t<string>('atleastFiveCharPassword')}\r\n                                                </p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </p>\r\n                                    )}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper password-checkHide no-margin fp-margin\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <a\r\n                                            href=\"/forgot-password\"\r\n                                            id=\"forgot-password\"\r\n                                            className=\"forgot-password\"\r\n                                            style={{ width: 'max-content', fontFamily: 'ubuntu' }}\r\n                                        >\r\n                                            {t<string>('forgotPassword')}\r\n                                        </a>\r\n                                    </FormControl>\r\n                                    <FormControl\r\n                                        className=\"input-wrapper submitBtn\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            marginTop: '50px',\r\n                                        }}\r\n                                    >\r\n                                        <ColorButton\r\n                                            type=\"submit\"\r\n                                            id=\"btn-enable-style\"\r\n                                            data-testid=\"button-element\"\r\n                                            disabled={open}\r\n                                            variant=\"contained\"\r\n                                            className=\"customBtn-01\"\r\n                                            sx={{\r\n                                                fontSize: '18px',\r\n                                                lineHeight: '21px',\r\n                                                fontFamily: 'ubuntu',\r\n                                                letterSpacing: '-0.72px',\r\n                                            }}\r\n                                        >\r\n                                            {t<string>('loginBtn')}\r\n                                        </ColorButton>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </form>\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n                {/* ACCOUNT FROM END */}\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"names":["Yup","email","required","password","min","ColorButton","styled","Button","color","theme","palette","getContrastText","purple","backgroundColor","height","width","borderRadius","mixBlendMode","opacity","toggleTheme","t","useLocales","navigate","useNavigate","useState","open","setOpen","setEmail","setPassword","dispatch","useAppDispatch","useAppSelector","state","auth","user","isError","message","isSuccess","isAuthenticated","useEffect","console","log","getFromLocalStorage","attributes","apiVrbls","appRoutes","formik","useFormik","initialValues","validationSchema","schema","onSubmit","userDetails","login","handleSubmit","handleChange","touched","errors","React","amount","weight","weightRange","showPassword","values","setValues","Header","Box","className","sx","flexGrow","id","action","method","FormGroup","FormControl","display","alignItems","position","margin","InputLabel","htmlFor","MailOutline","TextField","label","variant","border","type","inputProps","autoComplete","name","onChange","onInput","e","preventDefault","target","value","emailBoxElement","document","getElementById","match","LockOpen","submitButtonElement","passwordBoxElement","InputProps","endAdornment","InputAdornment","IconButton","onClick","onMouseDown","event","edge","VisibilityOutlined","VisibilityOffOutlined","href","style","fontFamily","marginTop","disabled","fontSize","lineHeight","letterSpacing"],"sourceRoot":""}