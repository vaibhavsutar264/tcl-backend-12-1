{"version":3,"file":"946.bundle.js","mappings":"0IAEIA,EAAyB,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBF,EAAuB,EAAQ,QAChDG,EAAc,EAAQ,OACtBC,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,+HACD,eACJN,EAAQ,EAAUG,C,0MCVX,SAASI,EAAoBC,GAClC,OAAO,EAAAC,EAAA,GAAqB,UAAWD,EACzC,CAEA,OADoB,EAAAE,EAAA,GAAuB,UAAW,CAAC,OAAQ,gBAAiB,iBAAkB,kBAAmB,SAAU,iB,sBCJxH,MAAMC,EAAuB,CAClCC,QAAS,eACTC,YAAa,eACbC,UAAW,iBACXC,cAAe,iBACfC,MAAO,cAiBT,MAZ0B,EACxBC,QACAC,iBAEA,MAAMC,EAP0BC,IACzBT,EAAqBS,IAAUA,EAMbC,CAA0BH,EAAWE,OACxDA,GAAQ,QAAQH,EAAO,WAAWE,KAAoB,IAAUD,EAAWE,MAC3EE,GAAe,QAAQL,EAAO,WAAWE,YAC/C,MAAI,SAAUF,GAASK,EACd,QAAQA,YAEV,QAAMF,EAAO,GAAI,E,WCnB1B,MAAMG,EAAY,CAAC,YAAa,QAAS,YAAa,SAAU,UAAW,oBAAqB,YAAa,UAAW,MA2BlHC,GAAW,EAAAC,EAAA,IAAOC,EAAA,EAAY,CAClCC,KAAM,UACNnB,KAAM,OACNoB,kBAAmB,CAACC,EAAOC,KACzB,MAAM,WACJZ,GACEW,EACJ,MAAO,CAACC,EAAOC,KAAMD,EAAO,aAAY,EAAAE,EAAA,GAAWd,EAAWe,cAAwC,WAAzBf,EAAWgB,WAA0BJ,EAAOK,OAAO,GAPnH,EASd,EACDlB,QACAC,iBAEO,OAAS,CAAC,EAA4B,SAAzBA,EAAWe,WAAwB,CACrDG,eAAgB,QACU,UAAzBlB,EAAWe,WAAyB,CACrCG,eAAgB,OAChB,UAAW,CACTA,eAAgB,cAEQ,WAAzBlB,EAAWe,YAA0B,OAAS,CAC/CG,eAAgB,aACM,YAArBlB,EAAWE,OAAuB,CACnCiB,oBAAqB,EAAkB,CACrCpB,QACAC,gBAED,CACD,UAAW,CACTmB,oBAAqB,aAEI,WAAzBnB,EAAWgB,WAA0B,CACvCI,SAAU,WACVC,wBAAyB,cACzBC,gBAAiB,cAGjBC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EAERC,aAAc,EACdC,QAAS,EAETC,OAAQ,UACRC,WAAY,OACZC,cAAe,SACfC,cAAe,OAEfC,iBAAkB,OAElB,sBAAuB,CACrBC,YAAa,QAGf,CAAC,KAAK,kBAA6B,CACjCV,QAAS,YA4Hf,MAxH0B,cAAiB,SAAcW,EAASC,GAChE,MAAMxB,GAAQ,EAAAyB,EAAA,GAAc,CAC1BzB,MAAOuB,EACPzB,KAAM,aAEF,UACF4B,EAAS,MACTnC,EAAQ,UAAS,UACjBc,EAAY,IAAG,OACfsB,EAAM,QACNC,EAAO,kBACPC,EAAiB,UACjBzB,EAAY,SAAQ,QACpB0B,EAAU,UAAS,GACnBC,GACE/B,EACJgC,GAAQ,OAA8BhC,EAAON,IACzC,kBACJuC,EACAN,OAAQO,EACRN,QAASO,EACTX,IAAKY,IACH,EAAAC,EAAA,MACGC,EAAcC,GAAmB,YAAe,GACjDC,GAAa,EAAAC,EAAA,GAAWjB,EAAKY,GAmB7B/C,GAAa,OAAS,CAAC,EAAGW,EAAO,CACrCT,QACAc,YACAiC,eACAlC,YACA0B,YAEIY,EA1HkBrD,KACxB,MAAM,QACJqD,EAAO,UACPrC,EAAS,aACTiC,EAAY,UACZlC,GACEf,EACEsD,EAAQ,CACZzC,KAAM,CAAC,OAAQ,aAAY,EAAAC,EAAA,GAAWC,KAA4B,WAAdC,GAA0B,SAAUiC,GAAgB,iBAE1G,OAAO,EAAAM,EAAA,GAAeD,EAAOjE,EAAqBgE,EAAQ,EAgH1CG,CAAkBxD,GAClC,OAAoB,SAAKM,GAAU,OAAS,CAC1CJ,MAAOA,EACPmC,WAAW,OAAKgB,EAAQxC,KAAMwB,GAC9BgB,QAASb,EACTxB,UAAWA,EACXsB,OA/BiBmB,IACjBZ,EAAkBY,IACgB,IAA9Bb,EAAkBc,SACpBR,GAAgB,GAEdZ,GACFA,EAAOmB,EACT,EAyBAlB,QAvBkBkB,IAClBX,EAAmBW,IACe,IAA9Bb,EAAkBc,SACpBR,GAAgB,GAEdX,GACFA,EAAQkB,EACV,EAiBAtB,IAAKgB,EACLnD,WAAYA,EACZyC,QAASA,EACTC,GAAI,IAAMiB,OAAOC,KAAKnE,GAAsBoE,SAAS3D,GAEhD,GAFyD,CAAC,CAC7DA,aACY4D,MAAMC,QAAQrB,GAAMA,EAAK,CAACA,KACvCC,GACL,G,sWCvGA,EApCA,SAAmB,GAAmC,IAAjCqB,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAS,EAATA,UAC1BnE,GAAQoE,EAAAA,EAAAA,KACRC,GAAaC,EAAAA,EAAAA,GAActE,EAAMuE,YAAYC,KAAK,OAMlDC,EAAc,WAChBP,GAAQ,EACZ,EAEA,OACI,0BACI,UAACQ,EAAA,EAAM,CACHL,WAAYA,EACZJ,KAAMA,EACNU,QAASF,EACT,kBAAgB,0BAAyB,WAEzC,SAACG,EAAA,EAAU,CAACC,QAASJ,EAAY,UAAC,SAACK,EAAA,EAAgB,OACnD,gBAAKC,I,6iIAAmBC,IAAI,MAC5B,SAACC,EAAA,EAAW,CAACC,GAAG,0BAA0BC,UAAU,SAAQ,SACvD,qBAEL,SAACC,EAAA,EAAa,WACV,UAACC,EAAA,EAAiB,CAACF,UAAU,SAAQ,WACjC,eAAG7C,UAAU,cAAa,2DAA8C,iBAAMA,UAAU,cAAa,SAAE6B,EAAUmB,YACjH,eAAGhD,UAAU,eAAc,mCAA4B,SAACiD,EAAA,EAAI,CAACC,MAAO,CAAE3D,OAAQ,WAAagD,QAASV,EAAUsB,OAAQtF,MAAM,QAAQa,UAAU,SAAQ,gCAM9K,E,khCCvBA,IAAM0E,GAAclF,EAAAA,EAAAA,IAAOmF,EAAAA,EAAPnF,EAA4B,YAAQ,MAAQ,CAC5DL,MADoD,EAALH,MAClC4F,QAAQC,gBAAgBC,EAAAA,EAAAA,MACrCvE,gBAAiBuE,EAAAA,EAAAA,KACjBC,OAAQ,OACRC,MAAO,OACPrE,aAAc,OACdsE,aAAc,aACdC,QAAS,GACT,UAAW,CACP3E,gBAAiBuE,EAAAA,EAAAA,MAExB,IAgID,EA9HuB,SAAH,GAA6B,IAAvBK,EAAW,EAAXA,YACdC,GAAoBC,EAAAA,EAAAA,KAAe,SAACC,GAAU,OAAKA,EAAMC,IAAI,IAA7DH,gBAC8B,KAAdI,EAAAA,EAAAA,WAAS,GAAK,GAA/BvC,EAAI,KAAEC,EAAO,KACduC,GAAWC,EAAAA,EAAAA,MACTC,GAAMC,EAAAA,EAAAA,KAAND,EAC8B,KAAZH,EAAAA,EAAAA,UAAS,IAAG,GAA/BlB,EAAK,KAAEuB,EAAQ,KAEhBC,EAAuB,SAACC,GAC1BA,EAAEC,iBACF,IAAMC,EAAmB,CAAE3B,MAAAA,GAC3BmB,GAASS,EAAAA,EAAAA,IAAeD,GAC5B,EAyBA,OAvBAE,EAAAA,EAAAA,YAAU,WACNV,GAASW,EAAAA,EAAAA,MACb,GAAG,KAsBC,iCACI,SAACC,EAAA,EAAM,CAAClB,YAAaA,KACrB,UAACmB,EAAA,EAAG,CAAChF,UAAU,kBAAiB,WAE5B,SAAC,IAAQ,KAET,SAAC,IAAa,KAEd,SAACgF,EAAA,EAAG,CAAC3E,GAAI,CAAE4E,SAAU,GAAKrC,GAAG,aAAa5C,UAAU,gBAAe,UAC/D,iBAAKA,UAAU,cAAa,WACxB,UAACgF,EAAA,EAAG,CAAC3E,GAAI,CAAEqD,MAAO,GAAK1D,UAAU,wBAAuB,WACpD,eAAIA,UAAU,QAAO,SAAEqE,EAAU,qBACjC,iBAAMrE,UAAU,gBAAe,SAAEqE,EAAU,2BAE/C,SAACW,EAAA,EAAG,CACA3E,GAAI,CAAE4E,SAAU,EAAGC,WAAY,gBAC/BlF,UAAU,sBAAqB,UAE/B,iBAAMmF,SAAUX,EAAsBrB,OAAO,IAAIiC,OAAO,OAAM,UAC1D,UAACC,EAAA,EAAS,YAEN,UAACC,EAAA,EAAW,CACRtF,UAAU,qCACV4C,GAAG,YACHvC,GAAI,CACAkF,QAAS,OACTC,WAAY,WACZzG,SAAU,WACV2E,MAAO,EACPtE,OAAQ,YACV,WAEF,SAACqG,EAAA,EAAU,CAACC,QAAQ,UAAU1F,UAAU,cAAa,UACjD,SAAC2F,EAAA,EAAe,CAAC/C,GAAG,iBAExB,SAACgD,EAAA,EAAS,CACN5F,UAAU,cACV6F,UAAQ,EACRjD,GAAG,UACHkD,MAAOzB,EAAU,8BACjBjE,QAAQ,WACR2F,aAAa,QACb1F,GAAI,CAAEqD,MAAO,EAAGrE,aAAc,mBAC9BjB,KAAK,UACL4H,KAAK,OACLC,QAjEd,SAACxB,GACvBA,EAAEC,iBACF,IAAMwB,EAAsBC,SAASC,eACjC,oBAEJ7B,EAAUE,EAAE4B,OAA4BC,OAEhBH,SAASC,eAC7B,aAEC3B,EAAE4B,OAA4BC,MAAMC,MAJnB,8BAKlB3E,GAAQ,GACRsE,EAAoBlG,UAAY,kCAEhC4B,GAAQ,GACRsE,EAAoBlG,UAAY,eAExC,EAiDwCsG,MAAOtD,EACPwD,SAAU,SAAC/B,GAAC,OAAKF,EAASE,EAAE4B,OAAOC,MAAM,QAIjD,SAAChB,EAAA,EAAW,CACRtF,UAAU,0BACVK,GAAI,CACAkF,QAAS,OACTC,WAAY,WACZzG,SAAU,WACV2E,MAAO,EACP+C,UAAW,QACb,UAEF,SAACrD,EAAW,CACR4C,KAAK,SACLpD,GAAG,mBACH,cAAY,iBACZ8D,SAAU/E,EACVvB,QAAQ,YACRJ,UAAU,eACVK,GAAI,CACAsG,SAAU,OACVC,WAAY,OACZC,WAAY,SACZC,cAAe,WACjB,SAEDzC,EAAU,+BAS3C,SAAC,EAAS,CAACxC,UAAW,CAAEmB,MAAAA,EAAOG,OAAQqB,GAAwB7C,KAAMmC,EAAiBlC,QAAS,SAACmF,GAAkB5C,GAASW,EAAAA,EAAAA,MAA0B,MAGjK,C","sources":["webpack://tclcpasstwentyfirstoct/./node_modules/@mui/icons-material/MailOutline.js","webpack://tclcpasstwentyfirstoct/./node_modules/@mui/material/esm/Link/linkClasses.js","webpack://tclcpasstwentyfirstoct/./node_modules/@mui/material/esm/Link/getTextDecoration.js","webpack://tclcpasstwentyfirstoct/./node_modules/@mui/material/esm/Link/Link.js","webpack://tclcpasstwentyfirstoct/./src/components/modals/ModalMail.tsx","webpack://tclcpasstwentyfirstoct/./src/components/login/forgot-password/ForgotPassword.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z\"\n}), 'MailOutline');\nexports.default = _default;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import { alpha, getPath } from '@mui/system';\nexport const colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = transformDeprecatedColors(ownerState.color);\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\", \"sx\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport getTextDecoration, { colorTransformations } from './getTextDecoration';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && _extends({\n    textDecoration: 'underline'\n  }, ownerState.color !== 'inherit' && {\n    textDecorationColor: getTextDecoration({\n      theme,\n      ownerState\n    })\n  }, {\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }), ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n    },\n\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const {\n      className,\n      color = 'primary',\n      component = 'a',\n      onBlur,\n      onFocus,\n      TypographyClasses,\n      underline = 'always',\n      variant = 'inherit',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = event => {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant,\n    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])]\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { Dialog, IconButton, Link } from '@mui/material';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { styled } from '@mui/system';\r\nimport EnhancedEncryptionIcon from '@mui/icons-material/EnhancedEncryption';\r\nimport PasswordProtected from '../../assets/images/svg/password-protected.svg'\r\nimport TicketRaised from '../../assets/images/svg/ticket-raised.svg'\r\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\r\n\r\nfunction ModalMail({ open, setOpen, modalData }: any) {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <IconButton onClick={handleClose}><CloseRoundedIcon /></IconButton>\r\n                <img src={TicketRaised} alt=\"\" />\r\n                <DialogTitle id=\"responsive-dialog-title\" textAlign='center'>\r\n                    {\"Check Your Mail\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText textAlign='center'>\r\n                        <p className='darker-text'>We have sent a link on your registered email <span className='bolder-text'>{modalData.email}</span></p>\r\n                        <p className='lighter-text'>Didn&lsquo;t receive link? <Link style={{ cursor: 'pointer' }} onClick={modalData.action} color='error' underline='always'>Resend</Link></p>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalMail;\r\n","import { SyntheticEvent, useEffect, useState } from 'react'\r\nimport {\r\n    useDispatch as useAppDispatch,\r\n    useSelector as useAppSelector,\r\n} from '../../../redux/store'\r\nimport { Email } from '../../../types/authType'\r\nimport { forgotPassword, resetForgotPaswordPrms } from '../../../redux/slices/authSlice'\r\nimport {\r\n    Box,\r\n    TextField,\r\n    InputLabel,\r\n    styled,\r\n    Button,\r\n    ButtonProps,\r\n    FormGroup,\r\n    FormControl,\r\n} from '@mui/material'\r\nimport { purple } from '@mui/material/colors'\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline'\r\nimport BannerBg from '../../common/elements/banner'\r\nimport BackgroundBox from '../../common/elements/backGroundBox'\r\nimport useLocales from '../../../hooks/useLocales'\r\nimport Header from '../../header/Header'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport ModalMail from '../../modals/ModalMail'\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n    color: theme.palette.getContrastText(purple[500]),\r\n    backgroundColor: purple[500],\r\n    height: '70px',\r\n    width: '100%',\r\n    borderRadius: '35px',\r\n    mixBlendMode: 'luminosity',\r\n    opacity: 0.5,\r\n    '&:hover': {\r\n        backgroundColor: purple[700],\r\n    },\r\n}))\r\n\r\nconst ForgotPassword = ({ toggleTheme }: any) => {\r\n    const { forgotPassEmail } = useAppSelector((state: any) => state.auth)\r\n    const [open, setOpen] = useState(true)\r\n    const dispatch = useAppDispatch()\r\n    const { t } = useLocales()\r\n    const [email, setEmail] = useState('')\r\n\r\n    const forgotPasswordSubmit = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        const userEmail: Email = { email }\r\n        dispatch(forgotPassword(userEmail))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(resetForgotPaswordPrms())\r\n    }, [])\r\n\r\n    const handleEmailChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        const submitButtonElement = document.getElementById(\r\n            'btn-enable-style'\r\n        ) as HTMLButtonElement\r\n        setEmail((e.target as HTMLInputElement).value)\r\n        const emailVariable = /^[^ ]+@[^ ]+\\.[a-z]{2,4}$/\r\n        const emailBoxElement = document.getElementById(\r\n            'email-box'\r\n        ) as HTMLInputElement\r\n        if ((e.target as HTMLInputElement).value.match(emailVariable)) {\r\n            setOpen(false)\r\n            submitButtonElement.className = 'customBtn-01 btn-enable-style'\r\n        } else {\r\n            setOpen(true)\r\n            submitButtonElement.className = 'customBtn-01'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header toggleTheme={toggleTheme} />\r\n            <Box className=\"account__screen\">\r\n                {/* ACCOUNT SCREEN BANNER START*/}\r\n                <BannerBg />\r\n                {/* ACCOUNT SCREEN ANIMATION START */}\r\n                <BackgroundBox />\r\n                {/* ACCOUNT FORM START */}\r\n                <Box sx={{ flexGrow: 1 }} id=\"login-form\" className=\"account__form\">\r\n                    <div className=\"form__inner\">\r\n                        <Box sx={{ width: 1 }} className=\"account__form__header\">\r\n                            <h3 className=\"title\">{t<string>('forgotPassword')}</h3>\r\n                            <span className=\"box-help-text\">{t<string>('forgotPassHelpTxt')}</span>\r\n                        </Box>\r\n                        <Box\r\n                            sx={{ flexGrow: 1, paddingTop: '0 !important' }}\r\n                            className=\"account__form__body\"\r\n                        >\r\n                            <form onSubmit={forgotPasswordSubmit} action=\"#\" method=\"post\">\r\n                                <FormGroup>\r\n                                    {/* Email Input feilds */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper no-margin yes-margin\"\r\n                                        id=\"email-box\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <InputLabel htmlFor=\"ammount\" className=\"label__icon\">\r\n                                            <MailOutlineIcon id=\"mail-icon\" />\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                            className=\"input-field\"\r\n                                            required\r\n                                            id=\"ammount\"\r\n                                            label={t<string>('enterYourRegisteredEmailId')}\r\n                                            variant=\"standard\"\r\n                                            autoComplete='false'\r\n                                            sx={{ width: 1, borderRadius: '10px !important' }}\r\n                                            name=\"ammount\"\r\n                                            type=\"text\"\r\n                                            onInput={handleEmailChange}\r\n                                            value={email}\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                        />\r\n                                    </FormControl>\r\n                                    {/* submit button */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper submitBtn\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            marginTop: '50px',\r\n                                        }}\r\n                                    >\r\n                                        <ColorButton\r\n                                            type=\"submit\"\r\n                                            id=\"btn-enable-style\"\r\n                                            data-testid=\"button-element\"\r\n                                            disabled={open}\r\n                                            variant=\"contained\"\r\n                                            className=\"customBtn-01\"\r\n                                            sx={{\r\n                                                fontSize: '18px',\r\n                                                lineHeight: '21px',\r\n                                                fontFamily: 'ubuntu',\r\n                                                letterSpacing: '-0.72px',\r\n                                            }}\r\n                                        >\r\n                                            {t<string>('getLink')}\r\n                                        </ColorButton>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </form>\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n            </Box>\r\n            <ModalMail modalData={{ email, action: forgotPasswordSubmit }} open={forgotPassEmail} setOpen={(status: any) => { dispatch(resetForgotPaswordPrms()) }} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getLinkUtilityClass","slot","generateUtilityClass","generateUtilityClasses","colorTransformations","primary","textPrimary","secondary","textSecondary","error","theme","ownerState","transformedColor","color","transformDeprecatedColors","channelColor","_excluded","LinkRoot","styled","Typography","name","overridesResolver","props","styles","root","capitalize","underline","component","button","textDecoration","textDecorationColor","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","inProps","ref","useThemeProps","className","onBlur","onFocus","TypographyClasses","variant","sx","other","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","useIsFocusVisible","focusVisible","setFocusVisible","handlerRef","useForkRef","classes","slots","composeClasses","useUtilityClasses","event","current","Object","keys","includes","Array","isArray","open","setOpen","modalData","useTheme","fullScreen","useMediaQuery","breakpoints","down","handleClose","Dialog","onClose","IconButton","onClick","CloseRounded","src","alt","DialogTitle","id","textAlign","DialogContent","DialogContentText","email","Link","style","action","ColorButton","Button","palette","getContrastText","purple","height","width","mixBlendMode","opacity","toggleTheme","forgotPassEmail","useAppSelector","state","auth","useState","dispatch","useAppDispatch","t","useLocales","setEmail","forgotPasswordSubmit","e","preventDefault","userEmail","forgotPassword","useEffect","resetForgotPaswordPrms","Header","Box","flexGrow","paddingTop","onSubmit","method","FormGroup","FormControl","display","alignItems","InputLabel","htmlFor","MailOutline","TextField","required","label","autoComplete","type","onInput","submitButtonElement","document","getElementById","target","value","match","onChange","marginTop","disabled","fontSize","lineHeight","fontFamily","letterSpacing","status"],"sourceRoot":""}