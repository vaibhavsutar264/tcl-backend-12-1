{"version":3,"file":"697.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/login/login-screen/Login.tsx"],"sourcesContent":["import * as React from 'react'\r\nimport { SyntheticEvent, useState, useEffect } from 'react'\r\nimport { login, resetLoginParms } from '../../../redux/slices/authSlice'\r\nimport { UserLogin } from '../../../types/authType'\r\nimport {\r\n    useDispatch as useAppDispatch,\r\n    useSelector as useAppSelector,\r\n} from '../../../redux/store'\r\nimport { useFormik } from 'formik'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport {\r\n    Box,\r\n    TextField,\r\n    InputLabel,\r\n    styled,\r\n    Button,\r\n    ButtonProps,\r\n    FormGroup,\r\n    FormControl,\r\n} from '@mui/material'\r\nimport { purple } from '@mui/material/colors'\r\nimport MailOutlineIcon from '@mui/icons-material/MailOutline'\r\nimport LockOpenIcon from '@mui/icons-material/LockOpen'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined'\r\nimport useLocales from '../../../hooks/useLocales'\r\nimport { getFromLocalStorage } from '../../../hooks/useLocalStorage'\r\nimport BackgroundBox from '../../common/elements/backGroundBox'\r\nimport BannerBg from '../../common/elements/banner'\r\nimport { apiVrbls, appRoutes, localStorageVar } from '../../../utils/constants'\r\nimport Header from '../../header/Header'\r\nimport * as Yup from 'yup'\r\nimport { on } from 'events'\r\n\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n    color: theme.palette.getContrastText(purple[500]),\r\n    backgroundColor: purple[500],\r\n    height: '70px',\r\n    width: '100%',\r\n    borderRadius: '35px',\r\n    mixBlendMode: 'luminosity',\r\n    opacity: 0.5,\r\n    '&:hover': {\r\n        backgroundColor: purple[700],\r\n    },\r\n}))\r\n\r\ninterface State {\r\n    email: string\r\n    password: string\r\n    amount: string\r\n    weight: string\r\n    weightRange: string\r\n    showPassword: boolean\r\n}\r\n\r\nconst Login = ({ toggleTheme }: any) => {\r\n    const { t } = useLocales()\r\n    const navigate = useNavigate()\r\n    const [open, setOpen] = useState(true)\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useAppDispatch()\r\n    const { user, isError, isAuthenticated } = useAppSelector((state: any) => state.auth || {})\r\n    const [values, setValues] = React.useState<State>({\r\n        email: '',\r\n        password: '',\r\n        amount: '',\r\n        weight: '',\r\n        weightRange: '',\r\n        showPassword: false,\r\n    })\r\n    \r\n    useEffect(() => {\r\n        if (!isAuthenticated) {\r\n            dispatch(resetLoginParms())\r\n        }\r\n        if (getFromLocalStorage(localStorageVar.TOKEN_VAR) && getFromLocalStorage(localStorageVar.TOKEN_VAR) !== null) {\r\n            if (user) {\r\n                if (user.attributes[apiVrbls.USER.IS_LOGGED_IN_FIRST]) {\r\n                    navigate(appRoutes.SET_PASSWORD)\r\n                } else {\r\n                    navigate(appRoutes.DASHBOARD)\r\n                }\r\n            }\r\n        }\r\n    }, [user, navigate, isAuthenticated, dispatch])\r\n      \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email().required(),\r\n            password: Yup.string().min(5).required(),\r\n        }),\r\n        onSubmit: () => {\r\n            const userDetails: UserLogin = {\r\n                email: email,\r\n                password: password,\r\n            }\r\n            dispatch(login(userDetails, email))\r\n        }\r\n    })\r\n    const { handleSubmit, handleChange, touched, errors } = formik\r\n    \r\n    const handleEmailChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        setEmail((e.target as HTMLInputElement).value)\r\n        const emailVariable = /^[^ ]+@[^ ]+\\.[a-z]{2,4}$/\r\n        const emailBoxElement = document.getElementById('email-box') as HTMLInputElement\r\n        // if ((e.target as HTMLInputElement).value.match(emailVariable)) {\r\n        //     // emailBoxElement.className = 'input-wrapper success'\r\n        // } else {\r\n        //     // emailBoxElement.className = 'input-wrapper'\r\n        // }\r\n    }\r\n\r\n    const handlePasswordChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        setPassword((e.target as HTMLInputElement).value)\r\n        const patternVariable = '.{5,}'\r\n        const submitButtonElement = document.getElementById('btn-enable-style') as HTMLButtonElement\r\n        const passwordBoxElement = document.getElementById('password-box') as HTMLButtonElement\r\n        if ((e.target as HTMLInputElement).value.match(patternVariable)) {\r\n            submitButtonElement.className = 'customBtn-01 btn-enable-style'\r\n            setOpen(false)\r\n        } else {\r\n            (e.target as HTMLInputElement).className = 'form-control input-custom'\r\n            submitButtonElement.className = 'customBtn-01'\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n\r\n    const handlePasteChange = (e: SyntheticEvent) => {\r\n        (e.target as HTMLInputElement).value = (e.target as HTMLInputElement).value\r\n        const submitButtonElement = document.getElementById('btn-enable-style') as HTMLButtonElement\r\n        setPassword((e.target as HTMLInputElement).value)\r\n        submitButtonElement.className = 'customBtn-01 btn-enable-style'\r\n        return setPassword((e.target as HTMLInputElement).value)\r\n    }\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword })\r\n    }\r\n\r\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header toggleTheme={toggleTheme} />\r\n            <Box className=\"account__screen\">\r\n                {/* ACCOUNT SCREEN BANNER START*/}\r\n                <BannerBg />\r\n                {/* ACCOUNT SCREEN ANIMATION START */}\r\n                <BackgroundBox />\r\n                {/* ACCOUNT FORM START */}\r\n                <Box\r\n                    sx={{ flexGrow: 1 }}\r\n                    id=\"login-form\"\r\n                    className=\"account__form login-form\"\r\n                >\r\n                    <div className=\"form__inner\">\r\n                        <Box sx={{ width: 1 }} className=\"account__form__header\">\r\n                            <h3 className=\"title\">{t<string>('login')}</h3>\r\n                            <span className=\"box-help-text\">{t<string>('enterEmailIdPassword')}</span>\r\n                        </Box>\r\n                        <Box sx={{ width: 1 }} className=\"account__form__error\">\r\n                            <p className=\"error__msg\">\r\n                                {isError ? (<p>{t<string>('yourEmailIdPasswordNotMatch')}</p>) : ('')}\r\n                            </p>\r\n                        </Box>\r\n                        <Box sx={{ flexGrow: 1 }} className=\"account__form__body\">\r\n                            <form onSubmit={handleSubmit} action=\"#\" method=\"post\">\r\n                                <FormGroup>\r\n                                    {/* Email id Input */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper yes-margin\"\r\n                                        data-margin={true}\r\n                                        id=\"email-box\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <InputLabel\r\n                                            htmlFor=\"username\"\r\n                                            id=\"label__icon\"\r\n                                            className=\"label__icon\"\r\n                                        >\r\n                                            <MailOutlineIcon id=\"mail-icon\" />\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                            className=\"input-field\"\r\n                                            required\r\n                                            id=\"username\"\r\n                                            label={t<string>('enterYourEmailID')}\r\n                                            variant=\"standard\"\r\n                                            sx={{ width: 1, borderRadius: '10px !important', border: 'none !important' }}\r\n                                            type=\"email\"\r\n                                            inputProps={{\r\n                                                'data-testid': 'email-element',\r\n                                                autoComplete: 'off',\r\n                                            }}\r\n                                            name=\"email\"\r\n                                            onChange={handleChange}\r\n                                            onInput={handleEmailChange}\r\n                                            value={email}\r\n                                        />\r\n                                    </FormControl>\r\n                                    {/* Password Input */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper password-checkHide no-margin\"\r\n                                        id=\"password-box\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <InputLabel htmlFor=\"password\" className=\"label__icon\">\r\n                                            <LockOpenIcon id=\"unlock-icon\" />\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                            required\r\n                                            id=\"password\"\r\n                                            label={t<string>('password')}\r\n                                            variant=\"standard\"\r\n                                            sx={{ width: 1, borderRadius: '10px !important' }}\r\n                                            type={values.showPassword ? 'text' : 'password'}\r\n                                            autoComplete=\"false\"\r\n                                            name=\"password\"\r\n                                            inputProps={{ 'data-testid': 'password-element' }}\r\n                                            className=\"form-control input-custom input-field\"\r\n                                            value={password}\r\n                                            onPaste={handlePasteChange}\r\n                                            onInput={handlePasswordChange}\r\n                                            onChange={handleChange}\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                            className=\"password-toggle\"\r\n                                                            aria-label=\"toggle password visibility\"\r\n                                                            onClick={handleClickShowPassword}\r\n                                                            onMouseDown={handleMouseDownPassword}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            {!values.showPassword ? (\r\n                                                                <VisibilityOffOutlinedIcon />\r\n                                                            ) : (\r\n                                                                <VisibilityOutlinedIcon />\r\n                                                            )}\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                    {/* Forgot Password Link */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper password-checkHide no-margin fp-margin\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            margin: '20px 0px',\r\n                                        }}\r\n                                    >\r\n                                        <Link\r\n                                            to={appRoutes.FORGOT_PASSWORD}\r\n                                            id={appRoutes.FORGOT_PASSWORD}\r\n                                            className=\"forgot-password\"\r\n                                            style={{ width: 'max-content', fontFamily: 'ubuntu' }}\r\n                                        >\r\n                                            {t<string>('forgotPassword')}\r\n                                        </Link>\r\n                                    </FormControl>\r\n                                    {/* Login Button */}\r\n                                    <FormControl\r\n                                        className=\"input-wrapper submitBtn\"\r\n                                        sx={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'flex-end',\r\n                                            position: 'relative',\r\n                                            width: 1,\r\n                                            marginTop: '50px',\r\n                                        }}\r\n                                    >\r\n                                        <ColorButton\r\n                                            type=\"submit\"\r\n                                            id=\"btn-enable-style\"\r\n                                            data-testid=\"button-element\"\r\n                                            disabled={open}\r\n                                            variant=\"contained\"\r\n                                            className=\"customBtn-01\"\r\n                                            sx={{\r\n                                                fontSize: '18px',\r\n                                                lineHeight: '21px',\r\n                                                fontFamily: 'ubuntu',\r\n                                                letterSpacing: '-0.72px',\r\n                                            }}\r\n                                        >\r\n                                            {t<string>('loginBtn')}\r\n                                        </ColorButton>\r\n                                    </FormControl>\r\n                                </FormGroup>\r\n                            </form>\r\n                        </Box>\r\n                    </div>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"names":["ColorButton","styled","Button","color","theme","palette","getContrastText","purple","backgroundColor","height","width","borderRadius","mixBlendMode","opacity","toggleTheme","t","useLocales","navigate","useNavigate","useState","open","setOpen","email","setEmail","password","setPassword","dispatch","useAppDispatch","useAppSelector","state","auth","user","isError","isAuthenticated","React","amount","weight","weightRange","showPassword","values","setValues","useEffect","resetLoginParms","getFromLocalStorage","localStorageVar","attributes","apiVrbls","appRoutes","formik","useFormik","initialValues","validationSchema","Yup","required","min","onSubmit","userDetails","login","handleSubmit","handleChange","touched","errors","className","sx","flexGrow","id","action","method","display","alignItems","position","margin","htmlFor","label","variant","border","type","inputProps","autoComplete","name","onChange","onInput","e","preventDefault","target","value","document","getElementById","onPaste","submitButtonElement","match","InputProps","endAdornment","onClick","onMouseDown","event","edge","to","style","fontFamily","marginTop","disabled","fontSize","lineHeight","letterSpacing"],"sourceRoot":""}