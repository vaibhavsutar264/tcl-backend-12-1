{"version":3,"file":"939.bundle.js","mappings":"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","sources":["webpack://tclcpasstwentyfirstoct/./src/components/common/icons/bigCheck.tsx","webpack://tclcpasstwentyfirstoct/./src/components/login/reset-password/ResetPassword.tsx"],"sourcesContent":["import { typeVar } from '../../../utils/constants'\r\n\r\nconst BigCheck = () => {\r\n  return (\r\n    <svg\r\n    id=\"big-check\"\r\n    data-name=\"big check\" type={typeVar.IMAGE_SVG} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"24px\" height=\"24px\"><path fill=\"#43A047\" d=\"M40.6 12.1L17 35.7 7.4 26.1 4.6 29 17 41.3 43.4 14.9z\"/></svg>\r\n  )\r\n}\r\n\r\nexport default BigCheck\r\n","import React, { FormEvent, useState, useEffect, SyntheticEvent } from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport { Typography } from '@mui/material'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { resetPassword } from '../../../redux/slices/authSlice'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport {\r\n    useDispatch as useAppDispatch,\r\n    useSelector as useAppSelector,\r\n} from '../../../redux/store'\r\n\r\nimport {\r\n    Box,\r\n    TextField,\r\n    InputLabel,\r\n    styled,\r\n    Button,\r\n    ButtonProps,\r\n    FormGroup,\r\n    FormControl,\r\n} from '@mui/material'\r\nimport { purple } from '@mui/material/colors'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport CheckIcon from '@mui/icons-material/Check'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport LockOpenIcon from '@mui/icons-material/LockOpen'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport Visibility from '@mui/icons-material/Visibility'\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined'\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined'\r\n// Importing Images\r\nimport Background from '../../../assets/images/login-bg.jpg'\r\nimport ChartImg from '../../../assets/images/svg/Chart.svg'\r\nimport PieChartImg from '../../../assets/images/svg/PieCharts.svg'\r\nimport SalesImg from '../../../assets/images/svg/Sales.svg'\r\nimport VoiceImg from '../../../assets/images/svg/Voice.svg'\r\nimport ChatImg from '../../../assets/images/svg/Chat.svg'\r\nimport VideoImg from '../../../assets/images/svg/Video.svg'\r\nimport WhatsappImg from '../../../assets/images/svg/Whatsapp.svg'\r\nimport useLocales from '../../../hooks/useLocales'\r\nimport BackgroundBox from '../../common/elements/backGroundBox'\r\nimport BannerBg from '../../common/elements/banner'\r\nimport { useParams } from 'react-router-dom'\r\nimport { apiVrbls, typeVar } from '../../../utils/constants'\r\nimport BigCheck from '../../common/icons/bigCheck'\r\nimport ModerateCheck from '../../common/icons/moderateCheck'\r\nimport Header from '../../header/Header'\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n    color: theme.palette.getContrastText(purple[500]),\r\n    backgroundColor: purple[500],\r\n    height: '70px',\r\n    width: '100%',\r\n    borderRadius: '35px',\r\n    mixBlendMode: 'luminosity',\r\n    opacity: 0.5,\r\n    '&:hover': {\r\n        backgroundColor: purple[700],\r\n    },\r\n}))\r\n\r\ninterface State {\r\n    amount: string\r\n    password: string\r\n    weight: string\r\n    weightRange: string\r\n    showPassword: boolean\r\n}\r\n\r\nconst ResetPassword = ({toggleTheme}:any) => {\r\n    const [uFulfilled, setUFulfilled] = useState(false);\r\n    const [lFulfilled, setLFulfilled] = useState(false);\r\n    const [sFulfilled, setSFulfilled] = useState(false);\r\n    const [charsFulfilled, setCharsFulfilled] = useState(false);\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [open, setOpen] = useState(true)\r\n    const { user, isError, isSuccess, message } = useAppSelector(\r\n        (state: any) => state.auth || {}\r\n    )\r\n    const dispatch = useAppDispatch()\r\n    const { token } = useParams()\r\n    const { t } = useLocales()\r\n    const LoginSchema = Yup.object().shape({\r\n        password: Yup.string().required('Password is required !!').min(8),\r\n        confirmPassword: Yup.string()\r\n            .required('Password is required !!')\r\n            .min(8)\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n    })\r\n\r\n    const defaultValues = {\r\n        password: '',\r\n        confirmPassword: '',\r\n    }\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(LoginSchema),\r\n        defaultValues,\r\n    })\r\n\r\n    const {\r\n        reset,\r\n        setError,\r\n        handleSubmit,\r\n        formState: { errors, isSubmitting },\r\n        register,\r\n    } = methods\r\n\r\n    const onSubmit = async (data: any) => {\r\n        if (password !== confirmPassword) {\r\n            return\r\n        }\r\n        try {\r\n            await dispatch(resetPassword({\r\n                newPassword: password,\r\n                username: user[apiVrbls.USER.EMAIL_ID]\r\n            }))\r\n        } catch (error) {\r\n            reset()\r\n        }\r\n    }\r\n    const [values, setValues] = React.useState<State>({\r\n        amount: '',\r\n        password: '',\r\n        weight: '',\r\n        weightRange: '',\r\n        showPassword: false,\r\n    })\r\n\r\n    const [confirmValues, setConfirmValues] = React.useState<State>({\r\n        amount: '',\r\n        password: '',\r\n        weight: '',\r\n        weightRange: '',\r\n        showPassword: false,\r\n    })\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        })\r\n    }\r\n    const handleClickShowConfirmPassword = () => {\r\n        setConfirmValues({\r\n            ...confirmValues,\r\n            showPassword: !confirmValues.showPassword,\r\n        })\r\n    }\r\n\r\n    const handleMouseDownPassword = (\r\n        event: React.MouseEvent<HTMLButtonElement>\r\n    ) => {\r\n        event.preventDefault()\r\n    }\r\n    useEffect(() => {\r\n        if (isError) {\r\n            console.log(message)\r\n        }\r\n        if (isSuccess) {\r\n            setPassword('')\r\n            setConfirmPassword('')\r\n        }\r\n    }, [isError, isSuccess, message, dispatch])\r\n\r\n    const handlePasswordChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        const tooltipMainBoxElement = document.getElementById(\r\n            'tooltip-main-box'\r\n        ) as HTMLElement\r\n        tooltipMainBoxElement.style.display = 'block'\r\n        setPassword((e.target as HTMLInputElement).value)\r\n        const patternVariable =\r\n            \"(?=.*[a-z])(?=.*[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^&*+`~'=?|][()-<>/]).{8,}\" //uppercase lowercase symbol and number\r\n        const uppercaseVariable = '[A-Z]'\r\n        const lowercaseVariable = '[a-z]'\r\n        const symbolVariable = '[^a-zA-Z0-9]'\r\n        const atleastVariable = '.{8,}'\r\n        const atleastFifteenVariable = '.{15,}'\r\n        const tooltipUppercaseElement = document.getElementById(\r\n            'uppercase'\r\n        ) as HTMLDataListElement\r\n        const tooltipUppercaseTick = document.getElementById(\r\n            'uppercaseTick'\r\n        ) as HTMLSpanElement\r\n        const tooltipLowercaseElement = document.getElementById(\r\n            'lowercase'\r\n        ) as HTMLDataListElement\r\n        const tooltipLowercaseTick = document.getElementById(\r\n            'lowercaseTick'\r\n        ) as HTMLSpanElement\r\n        const tooltipSymbolElement = document.getElementById(\r\n            'symbol'\r\n        ) as HTMLDataListElement\r\n        const tooltipSymbolTick = document.getElementById(\r\n            'symbolTick'\r\n        ) as HTMLSpanElement\r\n        const tooltipAtleastElement = document.getElementById(\r\n            'atleast'\r\n        ) as HTMLDataListElement\r\n        const tooltipAtleastTick = document.getElementById(\r\n            'atleastTick'\r\n        ) as HTMLSpanElement\r\n        const linearProgressModerateElement = document.getElementById(\r\n            'linear-progress-moderate'\r\n        ) as HTMLDataListElement\r\n        const linearProgressSuccessElement = document.getElementById(\r\n            'linear-progress-success'\r\n        ) as HTMLSpanElement\r\n        const passwordBoxElement = document.getElementById(\r\n            'password-box'\r\n        ) as HTMLButtonElement\r\n        const moderateStrengthElement = document.getElementById(\r\n            'moderate-strength-text'\r\n        ) as HTMLButtonElement\r\n        const highStrengthElement = document.getElementById(\r\n            'high-strength-text'\r\n        ) as HTMLButtonElement\r\n        if ((e.target as HTMLInputElement).value.match(patternVariable)) {\r\n            passwordBoxElement.className = 'input-wrapper success'\r\n        } else {\r\n            passwordBoxElement.className = 'input-wrapper'\r\n        }\r\n        const tooltipFullfilledRightClickGreen = 'tooltipList-item fulfilled'\r\n        const tooltipUnfullfilledRightClickGray = 'tooltipList-item'\r\n        if ((e.target as HTMLInputElement).value.match(uppercaseVariable)) {\r\n            tooltipUppercaseElement.className = tooltipFullfilledRightClickGreen\r\n            setUFulfilled(true)\r\n        } else {\r\n            tooltipUppercaseElement.className = tooltipUnfullfilledRightClickGray\r\n            setUFulfilled(false)\r\n        }\r\n        if ((e.target as HTMLInputElement).value.match(lowercaseVariable)) {\r\n            tooltipLowercaseElement.className = tooltipFullfilledRightClickGreen\r\n            setLFulfilled(true)\r\n        } else {\r\n            tooltipLowercaseElement.className = tooltipUnfullfilledRightClickGray\r\n            setLFulfilled(false)\r\n        }\r\n        if ((e.target as HTMLInputElement).value.match(symbolVariable)) {\r\n            tooltipSymbolElement.className = tooltipFullfilledRightClickGreen\r\n            setSFulfilled(true)\r\n        } else {\r\n            tooltipSymbolElement.className = tooltipUnfullfilledRightClickGray\r\n            setSFulfilled(false)\r\n        }\r\n        if ((e.target as HTMLInputElement).value.match(atleastVariable)) {\r\n            tooltipAtleastElement.className = tooltipFullfilledRightClickGreen\r\n            setCharsFulfilled(true)\r\n            linearProgressModerateElement.style.display = 'block'\r\n        } else {\r\n            tooltipAtleastElement.className = tooltipUnfullfilledRightClickGray\r\n            setCharsFulfilled(false)\r\n            linearProgressModerateElement.style.display = 'none'\r\n        }\r\n        if ((e.target as HTMLInputElement).value.match(atleastFifteenVariable)) {\r\n            linearProgressModerateElement.style.display = 'none'\r\n            linearProgressSuccessElement.style.display = 'block'\r\n            moderateStrengthElement.style.display = 'none'\r\n            highStrengthElement.style.display = 'block'\r\n        } else {\r\n            linearProgressModerateElement.style.display = 'block'\r\n            linearProgressSuccessElement.style.display = 'none'\r\n            moderateStrengthElement.style.display = 'block'\r\n            highStrengthElement.style.display = 'none'\r\n        }\r\n    }\r\n\r\n    const handleConfirmPasswordChange = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        setConfirmPassword((e.target as HTMLInputElement).value)\r\n        const confirmPasswordpatternVariable =\r\n            \"(?=.*[a-z])(?=.*[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^&*+`~'=?|][()-<>/]).{8,}\" //uppercase lowercase symbol and number\r\n        const atleastVariable = '.{3,}'\r\n        const submitButtonElement = document.getElementById(\r\n            'btn-enable-style'\r\n        ) as HTMLButtonElement\r\n        const confirmpasswordBoxElement = document.getElementById(\r\n            'confirm-password-box'\r\n        ) as HTMLElement\r\n        const matchBothPasswordElement = document.getElementById(\r\n            'match-both-password-error'\r\n        ) as HTMLParagraphElement\r\n        if (\r\n            (e.target as HTMLInputElement).value.match(confirmPasswordpatternVariable)\r\n        ) {\r\n            confirmpasswordBoxElement.className =\r\n                'input-wrapper password-checkHide success'\r\n        } else {\r\n            confirmpasswordBoxElement.className = 'input-wrapper password-checkHide'\r\n        }\r\n        if ((e.target as HTMLInputElement).value.match(atleastVariable)) {\r\n            matchBothPasswordElement.style.display = 'block'\r\n        } else {\r\n            matchBothPasswordElement.style.display = 'none'\r\n        }\r\n    }\r\n\r\n    const tooltipCloseFunction = () => {\r\n        const tooltipMainBoxElement = document.getElementById(\r\n            'tooltip-main-box'\r\n        ) as HTMLDataListElement\r\n        tooltipMainBoxElement.style.display = 'none'\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Header toggleTheme={toggleTheme} />\r\n        <Box className=\"account__screen\">\r\n            {/* ACCOUNT SCREEN BANNER START*/}\r\n            <BannerBg />\r\n            {/* ACCOUNT SCREEN BANNER END */}\r\n            {/* ACCOUNT SCREEN ANIMATION START */}\r\n            <BackgroundBox />\r\n            {/* ACCOUNT SCREEN ANIMATION END */}\r\n            {/* ACCOUNT FORM START */}\r\n            <Box\r\n                sx={{ flexGrow: 1 }}\r\n                id=\"login-form\"\r\n                className=\"account__form login-form\"\r\n            >\r\n                <div className=\"form__inner\">\r\n                    <Box sx={{ width: 1 }} className=\"account__form__header\">\r\n                        <h3 className=\"title\">{t<string>('resetPassword')}</h3>\r\n                        <Typography\r\n                            className=\"helper__title\"\r\n                            variant=\"body1\"\r\n                            sx={{\r\n                                textAlign: 'center',\r\n                                fontFamily: 'ubuntu',\r\n                                letterSpacing: 0,\r\n                                opacity: 0.6,\r\n                            }}\r\n                        >{t<string>('resetPasswordSubTitle')}</Typography>\r\n\r\n                    </Box>\r\n                    <Box sx={{ flexGrow: 1 }} className=\"account__form__body\">\r\n                        <form onSubmit={handleSubmit(onSubmit)} action=\"#\" method=\"post\">\r\n                            <FormGroup>\r\n                                <FormControl\r\n                                    className=\"input-wrapper yes-margin\"\r\n                                    data-margin={true}\r\n                                    id=\"password-box\"\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'flex-end',\r\n                                        position: 'relative',\r\n                                        width: 1,\r\n                                        margin: '20px 0px',\r\n                                    }}\r\n                                >\r\n                                    <InputLabel htmlFor=\"username\" className=\"label__icon\">\r\n                                        <LockOpenIcon id=\"unlock-icon\" />\r\n                                    </InputLabel>\r\n                                    <TextField\r\n                                        className='input-field'\r\n                                        required\r\n                                        id=\"password\"\r\n                                        label={t<string>('password')}\r\n                                        variant=\"standard\"\r\n                                        sx={{ width: 1, borderRadius: '10px !important', height: '40px', }}\r\n                                        type={values.showPassword ? 'text' : 'password'}\r\n                                        inputProps={{\r\n                                            'data-testid': 'password-element',\r\n                                            autoComplete: 'off',\r\n                                        }}\r\n                                        value={password}\r\n                                        onInput={handlePasswordChange}\r\n                                        {...register('password')}\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        className=\"password-toggle\"\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClickShowPassword}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        {values.showPassword ? (\r\n                                                            <VisibilityOutlinedIcon />\r\n                                                        ) : (\r\n                                                            <VisibilityOffOutlinedIcon />\r\n                                                        )}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n\r\n                                    {/* Tooltip start */}\r\n                                    <div id=\"tooltip-main-box\" className=\"tooltipCustom\">\r\n                                        <button\r\n                                            onClick={tooltipCloseFunction}\r\n                                            id=\"tooltip-close\"\r\n                                            type=\"button\"\r\n                                            className=\"tooltipClose\"\r\n                                        >\r\n                                            {' '}\r\n                                            <CloseIcon />\r\n                                        </button>\r\n                                        <div className=\"tooltipContent\">\r\n                                            <p className=\"tooltipTitle\">Password must have</p>\r\n                                            <ul className=\"tooltioList\">\r\n                                                <li id=\"uppercase\" className=\"tooltipList-item\">\r\n                                                    <span className=\"tooltip-icon\" id=\"uppercaseTick\">\r\n                                                        {uFulfilled ? <BigCheck /> : <CheckIcon />}\r\n                                                    </span>\r\n                                                    <span className=\"tooltip-text\">Upper</span>\r\n                                                </li>\r\n                                                <li id=\"lowercase\" className=\"tooltipList-item\">\r\n                                                    <span className=\"tooltip-icon\" id=\"lowercaseTick\">\r\n                                                        {lFulfilled ? <BigCheck /> : <CheckIcon />}\r\n                                                    </span>\r\n                                                    <span className=\"tooltip-text\">Lower Case</span>\r\n                                                </li>\r\n                                                <li id=\"symbol\" className=\"tooltipList-item\">\r\n                                                    <span className=\"tooltip-icon\" id=\"symbolTick\">\r\n                                                        {sFulfilled ? <BigCheck /> : <CheckIcon />}\r\n                                                    </span>\r\n                                                    <span className=\"tooltip-text\">A Symbol (@#&)</span>\r\n                                                </li>\r\n                                                <li id=\"atleast\" className=\"tooltipList-item\">\r\n                                                    <span className=\"tooltip-icon\" id=\"atleastTick\">\r\n                                                        {charsFulfilled ? <BigCheck /> : <CheckIcon />}\r\n                                                    </span>\r\n                                                    <span className=\"tooltip-text\">\r\n                                                        At least 8 characters\r\n                                                    </span>\r\n                                                </li>\r\n                                            </ul>\r\n                                            <Box sx={{ width: '100%', mr: 1 }}>\r\n                                                <p className=\"tooltipTitle StrengthTitle\">\r\n                                                    Password Strength:{' '}\r\n                                                    <span\r\n                                                        id=\"moderate-strength-text\"\r\n                                                        style={{ color: '#ed6c02' }}\r\n                                                    >\r\n                                                        Moderate\r\n                                                    </span>\r\n                                                    <span\r\n                                                        id=\"high-strength-text\"\r\n                                                        style={{ color: 'green' }}\r\n                                                    >\r\n                                                        High\r\n                                                    </span>\r\n                                                </p>\r\n                                                <LinearProgress\r\n                                                    id=\"linear-progress-moderate\"\r\n                                                    variant=\"determinate\"\r\n                                                    color=\"warning\"\r\n                                                    value={50}\r\n                                                />\r\n                                                <LinearProgress\r\n                                                    id=\"linear-progress-success\"\r\n                                                    variant=\"determinate\"\r\n                                                    color=\"success\"\r\n                                                    value={100}\r\n                                                />\r\n                                            </Box>\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* Tooltip end */}\r\n                                </FormControl>\r\n                                {errors.password && (\r\n                                    <p>\r\n                                        {errors.password.message == 'Password is required !!' ? (\r\n                                            <p className=\"text-error\">{t<string>('enterPassword')}</p>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                        {errors.password.message ==\r\n                                            'password must be at least 8 characters' ? (\r\n                                            <p className=\"text-error\">\r\n                                                {t<string>('atleastEightCharPassword')}\r\n                                            </p>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </p>\r\n                                )}\r\n                                <FormControl\r\n                                    className=\"input-wrapper password-checkHide no-margin\"\r\n                                    id=\"confirm-password-box\"\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'flex-end',\r\n                                        position: 'relative',\r\n                                        width: 1,\r\n                                        margin: '20px 0px',\r\n                                    }}\r\n                                >\r\n                                    <InputLabel htmlFor=\"confirmPassword\" className=\"label__icon\">\r\n                                        <LockOpenIcon id=\"unlock-icon\" />\r\n                                    </InputLabel>\r\n                                    <TextField\r\n                                        className='input-field'\r\n                                        required\r\n                                        id=\"confirmPassword\"\r\n                                        label={t<string>('confirmPassword')}\r\n                                        variant=\"standard\"\r\n                                        sx={{ width: 1, borderRadius: '10px !important', }}\r\n                                        type={confirmValues.showPassword ? 'text' : 'password'}\r\n                                        autoComplete=\"false\"\r\n                                        inputProps={{ 'data-testid': 'confirm-password-element' }}\r\n                                        value={confirmPassword}\r\n                                        onInput={handleConfirmPasswordChange}\r\n                                        {...register('confirmPassword')}\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        className=\"password-toggle\"\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClickShowConfirmPassword}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        {confirmValues.showPassword ? (\r\n                                                            <VisibilityOutlinedIcon />\r\n                                                        ) : (\r\n                                                            <VisibilityOffOutlinedIcon />\r\n                                                        )}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                </FormControl>\r\n                                {errors.confirmPassword && (\r\n                                    <p>\r\n                                        {errors.confirmPassword.message ==\r\n                                            'Password is required !!' ? (\r\n                                            <p className=\"text-error\">{t<string>('enterPassword')}</p>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                        {errors.confirmPassword.message ==\r\n                                            'confirmPassword must be at least 8 characters' ? (\r\n                                            <p className=\"text-error\">\r\n                                                {t<string>('atleastEightCharPassword')}\r\n                                            </p>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                    </p>\r\n                                )}\r\n                                <p\r\n                                    id=\"match-both-password-error\"\r\n                                    className={\r\n                                        password !== confirmPassword\r\n                                            ? 'text-error'\r\n                                            : 'text-error-success'\r\n                                    }\r\n                                >\r\n                                    {password.length > 0 && confirmPassword.length > 0\r\n                                        ? password !== confirmPassword\r\n                                            ? `${t<string>('bothPasswordMustMatch')}`\r\n                                            : `${t<string>('paswordsMatched')}`\r\n                                        : `${t<string>('bothPasswordMustMatch')}`}\r\n                                </p>\r\n                                <FormControl\r\n                                    className=\"input-wrapper submitBtn\"\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'flex-end',\r\n                                        position: 'relative',\r\n                                        width: 1,\r\n                                        marginTop: '50px',\r\n                                    }}\r\n                                >\r\n                                    <ColorButton\r\n                                        variant=\"contained\"\r\n                                        id=\"btn-enable-style\"\r\n                                        data-testid=\"button-element\"\r\n                                        type=\"submit\"\r\n                                        name=\"submit\"\r\n                                        disabled={\r\n                                            password.length > 0 && confirmPassword.length > 0\r\n                                                ? password !== confirmPassword\r\n                                                    ? true\r\n                                                    : false\r\n                                                : true\r\n                                        }\r\n                                        sx={{\r\n                                            fontSize: '18px',\r\n                                            lineHeight: '21px',\r\n                                            fontFamily: 'ubuntu',\r\n                                            letterSpacing: '-0.72px',\r\n                                        }}\r\n                                        className={\r\n                                            password.length > 0 && confirmPassword.length > 0\r\n                                                ? password !== confirmPassword\r\n                                                    ? 'customBtn-01'\r\n                                                    : 'customBtn-01 btn-enable-style'\r\n                                                : 'customBtn-01'\r\n                                        }\r\n                                    >\r\n                                        {t<string>('done')}\r\n                                    </ColorButton>\r\n                                </FormControl>\r\n                            </FormGroup>\r\n                        </form>\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n            {/* ACCOUNT FROM END */}\r\n        </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResetPassword\r\n"],"names":["id","type","typeVar","xmlns","viewBox","width","height","fill","d","i","ColorButton","styled","Button","color","theme","palette","getContrastText","purple","backgroundColor","borderRadius","mixBlendMode","opacity","toggleTheme","useState","uFulfilled","setUFulfilled","lFulfilled","setLFulfilled","sFulfilled","setSFulfilled","charsFulfilled","setCharsFulfilled","password","setPassword","confirmPassword","setConfirmPassword","useAppSelector","state","auth","user","isError","isSuccess","message","dispatch","useAppDispatch","t","useParams","token","useLocales","LoginSchema","Yup","shape","required","min","oneOf","methods","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","setError","formState","errors","register","isSubmitting","onSubmit","data","resetPassword","newPassword","username","apiVrbls","React","amount","weight","weightRange","showPassword","values","setValues","confirmValues","setConfirmValues","handleMouseDownPassword","event","preventDefault","useEffect","console","log","className","sx","flexGrow","variant","textAlign","fontFamily","letterSpacing","action","method","display","alignItems","position","margin","htmlFor","label","inputProps","autoComplete","value","onInput","e","document","getElementById","style","target","tooltipUppercaseElement","tooltipLowercaseElement","tooltipSymbolElement","tooltipAtleastElement","linearProgressModerateElement","linearProgressSuccessElement","passwordBoxElement","moderateStrengthElement","highStrengthElement","match","tooltipFullfilledRightClickGreen","tooltipUnfullfilledRightClickGray","InputProps","endAdornment","onClick","onMouseDown","edge","mr","confirmpasswordBoxElement","matchBothPasswordElement","length","marginTop","name","disabled","fontSize","lineHeight"],"sourceRoot":""}